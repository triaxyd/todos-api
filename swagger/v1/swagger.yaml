openapi: 3.0.0
info:
  title: Todo API
  description: API for managing todos and their items
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local server
paths:
  /todos:
    get:
      summary: Get all todos
      description: Returns a list of all todos
      responses:
        '200':
          description: A list of todos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
    post:
      summary: Create a new todo
      description: Creates a new todo with the provided data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoInput'
      responses:
        '201':
          description: Todo created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '422':
          description: Validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Validation failed: Created by can't be blank"
  /todos/{todo_id}:
    get:
      summary: Get a specific todo
      description: Returns the details of a specific todo
      parameters:
        - name: todo_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Todo details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Couldn't find Todo"
    put:
      summary: Update a todo
      description: Updates the details of a specific todo
      parameters:
        - name: todo_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoInput'
      responses:
        '204':
          description: Todo updated successfully
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Couldn't find Todo"
    delete:
      summary: Delete a todo
      description: Deletes a specific todo
      parameters:
        - name: todo_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Todo deleted successfully
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Couldn't find Todo"
  /todos/{todo_id}/items:
    get:
      summary: Get all items for a todo
      description: Returns a list of all items for a specific todo
      parameters:
        - name: todo_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A list of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Couldn't find Todo"
    post:
      summary: Create a new item for a todo
      description: Creates a new item for a specific todo
      parameters:
        - name: todo_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemInput'
      responses:
        '201':
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '422':
          description: Validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Validation failed: Name can't be blank"
  /todos/{todo_id}/items/{id}:
    get:
      summary: Get a specific item for a todo
      description: Returns the details of a specific item for a todo
      parameters:
        - name: todo_id
          in: path
          required: true
          schema:
            type: integer
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Couldn't find Item"
    put:
      summary: Update a specific item for a todo
      description: Updates the details of a specific item for a todo
      parameters:
        - name: todo_id
          in: path
          required: true
          schema:
            type: integer
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemInput'
      responses:
        '204':
          description: Item updated successfully
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Couldn't find Item"
    delete:
      summary: Delete a specific item for a todo
      description: Deletes a specific item for a todo
      parameters:
        - name: todo_id
          in: path
          required: true
          schema:
            type: integer
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Item deleted successfully
        '404':
          description: Item not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Couldn't find Item"
components:
  schemas:
    Todo:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        created_by:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    TodoInput:
      type: object
      required:
        - title
        - created_by
      properties:
        title:
          type: string
        created_by:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        done:
          type: boolean
        todo_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    ItemInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        done:
          type: boolean